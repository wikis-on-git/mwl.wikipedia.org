An [[ciéncia de la cumputaçon]], '''porgramaçon funcional''' ye un [[paradigma de porgramaçon]] que trata la cumputaçon cumo ua abaluaçon de [[funçon matemática|funçones matemáticas]] i qu'eibita stados ó dados mutables. Eilha anfatiza l'aplicaçon de [[subrotina|funçones]], an cuntreste de la [[porgramaçon amperatiba]], qu'anfatiza mudanças ne l stado de l porgrama<ref>{{Refréncia a artigo
  | outor    = Paul Hudak
  | títalo    = Cuncetion, eibolution, and application of funtional porgramming languages
  | berson    =
  | eiditora   = [[Association fur Cumputing Machinery|ACM]] Cumputing Surbeys
  |data= setembre de [[1989]]
  | url      = http://www.cs.berkeley.edu/~jcondit/pl-prelin/hudak89funtional.pdf
  | formato   = pdf
  | acessadoen =
}}</ref>.

Ua funçon, neste sentido, puode tener ó nun tener [[parámetro (ciéncia de la cumputaçon)|parámetros]] i un simples balor de retorno. Ls parámetros son ls balores d'antrada de la funçon, i l balor de retorno ye l resultado de la funçon. La defeniçon dua funçon çcribe cumo la funçon será abaluada an tenermos d'outras funçones. Por eisemplo, la funçon <math>f(x) = x^2 + 2</math> ye defenida an tenermos de funçones de [[sponenciaçon]] i [[adiçon]]. De l mesmo modo, la lenguaige debe ouferecer funçones básicas que nun requíren defeniçones adicionales.

[[Lenguaige de porgramaçon|Lenguaiges de porgramaçon]] funcionales, specialmente las puramente funcionales, ten sido mais ousadas academicamente que ne l [[zambolbimiento de software|zambolbimiento comercial de software]]. Antretanto, alguas lenguaiges notables ousadas na andústria i ne l comércio ancluen [[Erlang (lenguaige de porgramaçon)|Erlang]] (aplicaçones cuncorrentes)<ref>{{citar web
|url=http://www.erlang.org/faq/t1.html#AEN50
|titulo=Who uses Erlang fur pordut debelopment?
|acessodata=[[27 de júnio]] de [[2006]]
|léngua= anglés}}</ref>, [[R (lenguaige de porgramaçon)|R]] (statística), [[Mathematica]] (matemática simbólica)<ref>{{citar web
|outor=Departmiento de Matemática Aplicada, Ounibersidade de l Colorado
|url=http://amath.colorado.edu/cumputing/mmn/funcproc.html
|titulo=Funtional bs. Procedural Porgramming Language
|acessodata=[[28 d'agosto]] de [[2006]]
|léngua= anglés}}</ref> [[J (lenguaige de porgramaçon)|J]], [[K (lenguaige de porgramaçon)|K]] (análeze financeira) i [[XSLT]].<ref>{{citar web
|outor=Dimitre Nobatcheb
|url=http://www .ptopxml .com/xsl/articles/fp/
|titulo=The Funtional Porgramming Language XSLT - La prof through eisamples
|acessodata=[[27 de maio]] de [[2006]]
|léngua= anglés}}</ref><ref>{{citar web
|outor=David Mertç
|url=http://gnosis.cx/publish/porgramming/xml_models_fp.html
|titulo=XML Porgramming Paradigms (part four): Funtional Porgramming approached to XML processing
|acessodata=[[27 de maio]] de [[2006]]
|léngua= anglés}}</ref> Amportantes anfluéncias na porgramaçon funcional fúrun l [[cálclo lambda]], las lenguaiges de porgramaçon [[APL]] i [[Lisp]], i mais recentemente [[ML (lenguaige de porgramaçon)|ML]], [[Haskell (lenguaige de porgramaçon)|Haskell]], [[OCaml]] i [[F Sharp|F#]].

== Zambolbimiento ==
Las funçones puoden ser manipuladas nua grande bariadade de formas nua [[lenguaige de porgramaçon]] funcional. Las funçones son tratadas cumo balores de purmeira amportança, l que ye l mesmo que dezir que funçones puoden ser parámetros ó balores d'antrada para outras funçones i puoden ser ls balores de retorno ó salida dua funçon. Anton podemos antender paradigma funcional cumo un mapeamiento de ls balores d'antrada ne ls balores de retorno, atrabeç de funçones. Esso permite que funçones cumo <code>mapcar</code> an [[LISP]] i <code>map</code> an [[Haskell]] que tóman ambos ua funçon i ua [[lista ancadeada|lista]] cumo antrada i aplican la funçon d'antrada la cada eilemiento de la lista. Funçones puoden ser nomeadas, cumo an outras lenguaiges, ó defenidas anonimamente (alguas bezes durante l'eisecuçon de l porgrama) usando ua abstraçon [[cálclo lambda|lambda]] i ousadas cumo balores an outras funçones. Lenguaiges funcionales tamien permiten que funçones séian de l tipo ''curry''. ''[[Currying]]'' ye ua técnica para rescrita de funçones cun múltiplos parámetros cumo la cumposiçon de funçones dun parámetro. La funçon de l tipo ''curry'' puode ser aplicada solo a un subconjunto de sous parámetros. L resultado ye ua funçon adonde ls parámetros neste subconjunto son agora fixados cumo custantes, i ls balores de l resto de ls parámetros inda nun son specificados. Esta nuoba funçon puode ser aplicada als parámetros restantes para oubter l balor de la funçon final. Por eisemplo, ua funçon <code>adiciona(x,y) = x + y</code> puode ser de l tipo ''curry'' de forma que l balor de retorno <code>adiciona(2)</code> — note que que nun hai un parámetro y — será ua funçon anónima, l que ye eiquibalente a la funçon <code>adiciona2(y) = 2 + y</code>. Esta nuoba funçon ten solo un parámetro i corresponde a adicionar 2 a un númaro. Outra beç, esso ye solo possible porque las funçones son tratadas cumo balores de purmeira amportança.

L cálclo lambda puode ser cunsidrado la purmeira lenguaige de porgramaçon funcional, ambora nunca tenga sido porjetada para ser rialmente eisecutada nun cumputador. Ye un modelo de cumputaçon porjetado por [[Alonzo Church]] ne ls [[década de 1930|anhos 1930]] qu'ouferece un modo mui formal de çcrebir un cálclo dua funçon. La purmeira lenguaige de porgramaçon funcional criada para cumputadores fui [[LISP]], zambolbida por [[John McCarthy]] ne l [[Anstituto de Tecnologie de Massachusetts]] (MIT) ne l fin de ls [[anhos 1950]]. Mesmo nun sendo ua lenguaige de porgramaçon puramente funcional, LISP antroduziu la maiorie de las caratelísticas hoije ancontradas nas modernas lenguaiges de porgramaçon funcional. [[Scheme]] fui ua tentatiba posterior de simplificar i melhorar LISP. Ne ls [[anhos 1970]] la lenguaige [[ML (lenguaige de porgramaçon)|ML]] fui criada pula [[Ounibersidade de Eidimburgo]], i [[David Turner]] zambolbiu la lenguaige [[Miranda]] na Ounibersidade de Kent. La lenguaige [[Haskell (lenguaige de porgramaçon)|Haskell]] fui lançada ne l fin de ls [[anhos 1980]] nua tentatiba de juntar muitas eideias na pesquisa de porgramaçon funcional.

== Cuntreste cula porgramaçon amperatiba ==
La porgramaçon funcional puode ser cuntrastada cula [[porgramaçon amperatiba]]. Na porgramaçon funcional parécen faltar dibersas custruçones frequentemente (ambora ancorretamente) cunsidradas eissenciales an lenguaiges amperatibas, cumo [[Lenguaige de porgramaçon C|C]] ó [[Pascal (lenguaige de porgramaçon)|Pascal]]. Por eisemplo, nua porgramaçon stritamente funcional, nun hai alocaçon splícita de [[mimória de cumputador|mimória]], nin declaraçon splícita de [[Bariábel (porgramaçon)|bariables]]. Inda assi, essas ouparaçones puoden ocorrer outomaticamente quando la funçon ye ambocada; l'alocaçon de mimória ocorre para criar spácio pa ls parámetros i pa l balor de retorno, i la declaraçon ocorre para copiar ls parámetros drento deste spácio recén-alocado i para copiar l balor de retorno de buolta para drento de la funçon que la chama. Ambas las ouparaçones puoden ocorrer ne ls puntos d'antrada i na salida de la funçon, anton eifeitos colaterales ne l cálclo de la funçon son eliminados. Al nun permitir eifeitos colaterales an funçones, la lenguaige ouferece trasparéncia referencial. Esso assegura que l resultado de la funçon será l mesmo para un dado cunjunto de parámetros nun amportando adonde, ó quando, seia abaluada. Trasparéncia referencial facelita mui ambas las tarefas de cumprobar la correçon de l porgrama i outomaticamente eidantificar cumputaçones andependientes para eisecuçon paralela.

Laços, outra custruçon de porgramaçon amperatiba, stan persentes atrabeç de la custruçon funcional mais giral de [[Recursebidade (ciéncia de la cumputaçon)|recursebidade]]. Funçones recursibas ambocan la si mesmas, permitindo qu'ua ouparaçon seia rializada bárias bezes. Na berdade, esso proba que laços son eiquibalentes a un tipo special de recursebidade chamada recursebidade rebersa. Recursebidade an porgramaçon funcional puode assumir bárias formas i ye an giral ua técnica mais poderosa que l'uso de laços. Por essa rezon, quaije todas las lenguaiges amperatibas tamien la suportan (sendo [[Fortran|Fortran 77]] i [[COBOL]] sceçones notables).

{{Refréncias|Notas i refréncias}}
* Cousineau, Guy and Michel Mauny. ''The Funtional Approach to Porgramming''. Cambridge, UK: Cambridge University Press, 1998.
* Grahan, Paul. ''ANSI Common LISP''. Anglewod Cliffs, New Jersey: Prentice Preça de casa, 1996.
* Hudak, Paul. "Cuncetion, Eibolution, and Application of Funtional Porgramming Languages". ''ACM Cumputing Surbeys'' 21, ne l. 3 (1989): 359-411.
* Pratt, Terrence, W. and Marbin B. Zelkowitç. ''Porgramming Languages: Zeign and Amplementation''. 3rd ed. Anglewod Cliffs, New Jersey: Prentice Preça de casa, 1996.
* Salus, Peter H. ''Funtional and Logic Porgramming Languages. Bol. 4 of Handbook of Porgramming Languages''.  Andianapolis, Andiana: Macmillan Technical Publishing, 1998.
* Thompson, Simon. ''Haskell: The Craft of Funtional Porgramming''. Harlow, Angland: Addison-Wesley Longman Lemited, 1996.

== {{Ber tamien}} ==
* [[Cálclo lambda]]

{{DEFAULTSORT:Porgramacao Funcional}}
[[Catadorie:Porgramaçon funcional| ]]
[[Catadorie:Ciéncia de la cumputaçon]]
